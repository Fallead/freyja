"""
Django settings for freyja project.

Generated by 'django-admin startproject' using Django 1.8.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import sys
import logging
import logging.config
from utils.log_filters import skip_illegal_level, get_level

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '^(bvrzo7+kc6q(*trq^w4uz_4_nop$)*yqj&sa-^rj3o2isdt1'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'freyja.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
    {
        'BACKEND': 'django.template.backends.jinja2.Jinja2',
        'DIRS': [os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'environment': 'utils.jinja2.environment',
        },
    },
]

WSGI_APPLICATION = 'freyja.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'


# this must before log setting
# local_settings should contains like: LOG_DIRECTORY = '/Users/***/Desktop/project/log/freyja/'
try:
    from local_settings import *
except ImportError:
    pass

LOGGING_CONFIG = None
LOG_INFO = 'info.log'
LOG_WARNING = 'warning.log'
LOG_ERROR = 'error.log'
LOG_CRITICAL = 'critical.log'
CUSTOM_LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[%(asctime)s] %(levelname)s [%(name)s.%(funcName)s:%(lineno)d] %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
    },
    'handlers': {
        'file_info': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_DIRECTORY + LOG_INFO,
            'formatter': 'verbose',
            'filters': ['info_level'],
            'maxBytes': 1024 * 1024 * 500,
            'backupCount': 10
        },
        'file_warning': {
            'level': 'WARNING',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_DIRECTORY + LOG_WARNING,
            'formatter': 'verbose',
            'filters': ['warning_level'],
            'maxBytes': 1024 * 1024 * 500,
            'backupCount': 10
        },
        'file_error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_DIRECTORY + LOG_ERROR,
            'formatter': 'verbose',
            'filters': ['error_level'],
            'maxBytes': 1024 * 1024 * 500,
            'backupCount': 10
        },
        'file_critical': {
            'level': 'CRITICAL',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_DIRECTORY + LOG_CRITICAL,
            'formatter': 'verbose',
            'filters': ['critical_level'],
            'maxBytes': 1024 * 1024 * 500,

        },
        'console_info': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
            'stream': sys.stdout,
            'filters': ['skip_illegal_info_level'],
        },
        'console_error': {
            'level': 'ERROR',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'filters': {
        'skip_illegal_info_level': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': skip_illegal_level(logging.DEBUG, logging.WARNING),
        },
        'info_level': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': get_level(logging.INFO),
        },
        'warning_level': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': get_level(logging.WARNING),
        },
        'error_level': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': get_level(logging.ERROR),
        },
        'critical_level': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': get_level(logging.CRITICAL),
        },
    },
    'loggers': {
        '': {
            'level': 'INFO',
            'handlers': ['console_info', 'console_error', 'file_info', 'file_warning', 'file_error', 'file_critical'],
        },
    }
}

logging.config.dictConfig(CUSTOM_LOGGING)

